{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","auth","GoogleAuthProvider","App","state","currentItem","title","url","imageUrl","notes","username","items","user","handleChange","bind","handleSubmit","login","logout","onAuthStateChanged","setState","database","ref","on","snapshot","val","newItems","item","push","id","signOut","then","signInWithPopup","result","e","preventDefault","itemsRef","this","displayName","email","target","name","value","itemId","remove","className","onClick","src","photoURL","alt","onSubmit","type","placeholder","onChange","map","key","href","removeItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5e455aa.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBz8ov39ArdLafOeWknpSjRvED8nBIonRc\",\n    authDomain: \"wanty-things.firebaseapp.com\",\n    databaseURL: \"https://wanty-things.firebaseio.com\",\n    projectId: \"wanty-things\",\n    storageBucket: \"wanty-things.appspot.com\",\n    messagingSenderId: \"101260019554\",\n    appId: \"1:101260019554:web:7bb2bc24bec282973ece3b\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\nexport default firebase;\n","import React, { Component } from 'react';\nimport './App.css';\nimport firebase, { auth, provider } from './firebase.js';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            currentItem: {\n                title: '',\n                url: '',\n                imageUrl: '',\n                notes: '',\n            },\n            username: '',\n            items: [],\n            user: null\n        };\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.login = this.login.bind(this);\n        this.logout = this.logout.bind(this);\n    }\n\n    componentDidMount() {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                this.setState({ user });\n            } \n        });\n        const itemsRef = firebase.database().ref('items');\n        itemsRef.on('value', (snapshot) => {\n            let items = snapshot.val();\n            let newItems = [];\n            for (let item in items) {\n                newItems.push({\n                    id: item,\n                    title: items[item].title,\n                    url: items[item].url,\n                    imageUrl: items[item].imageUrl,\n                    notes: items[item].notes,\n                    user: items[item].user\n                });\n            }\n            this.setState({\n                items: newItems\n            });\n        });\n    }\n    \n    logout() {\n        auth.signOut()\n            .then(() => {\n                this.setState({\n                    user: null\n                });\n            });\n    }\n\n    login() {\n        auth.signInWithPopup(provider) \n            .then((result) => {\n                const user = result.user;\n                this.setState({\n                    user\n                });\n            });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const itemsRef = firebase.database().ref('items');\n        const item = {\n            title: this.state.currentItem.title,\n            url: this.state.currentItem.url,\n            imageUrl: this.state.currentItem.imageUrl,\n            notes: this.state.currentItem.notes,\n            user: this.state.user.displayName || this.state.user.email\n        }\n        itemsRef.push(item);\n        this.setState({\n            currentItem: {\n                title: '',\n                url: '',\n                imageUrl: '',\n                notes: '',\n            },\n            username: ''\n        });\n    }\n\n    handleChange(e) {\n        const currentItem = this.state.currentItem;\n        this.setState({\n            currentItem: {\n                ...currentItem,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n    \n    removeItem(itemId) {\n        const itemRef = firebase.database().ref(`/items/${itemId}`);\n        itemRef.remove();\n    }\n\n    render() {\n        return (\n            <div className='app'>\n                <header>\n                    <div className='wrapper'>\n                        <h1>Wanty Things</h1>\n                        {this.state.user ?\n                        <button onClick={this.logout}>Log Out</button>                \n                        :\n                        <button onClick={this.login}>Log In</button>              \n                        }\n\n                    </div>\n                </header>\n                {this.state.user ?\n                   <div>\n                     <div className='user-profile'>\n                       <img src={this.state.user.photoURL} alt=\"User Avatar\"/>\n                     </div>\n                        <div className='container'>\n                            <section className=\"add-item\">\n                              <form onSubmit={this.handleSubmit}>\n                                <input type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.handleChange} value={this.state.user.displayName || this.state.user.email} />\n                                <input type=\"text\" name=\"title\" placeholder=\"Title\" onChange={this.handleChange} value={this.state.currentItem.title} />\n                                <input type=\"text\" name=\"url\" placeholder=\"Url\" onChange={this.handleChange} value={this.state.currentItem.url} />\n                                <input type=\"text\" name=\"imageUrl\" placeholder=\"Image Url\" onChange={this.handleChange} value={this.state.currentItem.imageUrl} />\n                                <textarea name=\"notes\" placeholder=\"Notes\" onChange={this.handleChange} value={this.state.currentItem.notes} />\n                                <button>Add Item</button>\n                              </form>\n                            </section>\n                            <section className='display-item'>\n                                <div className='wrapper'>\n                                    <ul>\n                                        {this.state.items.map((item) => {\n                                            return (\n                                                <li key={item.id}>\n                                                    <h3><a href={item.url}>{item.title}</a></h3>\n                                                    <div>added by: {item.user}</div>\n                                                    <div>\n                                                        <img src={item.imageUrl} alt={item.title} />\n                                                        <p>{item.notes}</p>\n                                                    </div>\n                                                    {item.user === this.state.user.displayName || item.user === this.state.user.email ?\n                                                    <button onClick={() => this.removeItem(item.id)}>Remove Item</button> : null}\n                                                </li>\n                                            )\n                                        })}\n                                    </ul>\n                                </div>\n                            </section>\n                        </div>\n                   </div>\n                   :\n                   <div className='wrapper'>\n                     <p>You must be logged in to see the potluck list and submit to it.</p>\n                   </div>\n                }\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}